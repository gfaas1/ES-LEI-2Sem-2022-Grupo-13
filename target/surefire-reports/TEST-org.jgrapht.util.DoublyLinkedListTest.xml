<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="org.jgrapht.util.DoublyLinkedListTest" time="0.04" tests="945" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="18"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/gui/.m2/repository/org/apache/maven/surefire/surefire-booter/3.0.0-M5/surefire-booter-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-api/3.0.0-M5/surefire-api-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-logger-api/3.0.0-M5/surefire-logger-api-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-shared-utils/3.0.0-M4/surefire-shared-utils-3.0.0-M4.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-extensions-spi/3.0.0-M5/surefire-extensions-spi-3.0.0-M5.jar:/home/gui/lei/3.ano/es/teste/jgrapht-core/target/test-classes:/home/gui/.m2/repository/com/googlecode/junit-toolbox/junit-toolbox/2.4/junit-toolbox-2.4.jar:/home/gui/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/home/gui/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/gui/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/home/gui/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/gui/.m2/repository/org/mockito/mockito-core/1.9.5/mockito-core-1.9.5.jar:/home/gui/.m2/repository/org/objenesis/objenesis/1.0/objenesis-1.0.jar:/home/gui/.m2/repository/org/openjdk/jmh/jmh-core/1.28/jmh-core-1.28.jar:/home/gui/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/home/gui/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/home/gui/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.28/jmh-generator-annprocess-1.28.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-junit47/3.0.0-M5/surefire-junit47-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/common-java5/3.0.0-M5/common-java5-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/common-junit3/3.0.0-M5/common-junit3-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/common-junit4/3.0.0-M5/common-junit4-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/common-junit48/3.0.0-M5/common-junit48-3.0.0-M5.jar:/home/gui/.m2/repository/org/apache/maven/surefire/surefire-grouper/3.0.0-M5/surefire-grouper-3.0.0-M5.jar"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.country.format" value="PT"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="18"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/home/gui/.jdks/openjdk-18/lib"/>
    <property name="sun.java.command" value="org.apache.maven.surefire.booter.ForkedBooter /home/gui/lei/3.ano/es/teste/jgrapht-core/target/surefire 2022-03-26T17-26-35_386-jvmRun1 surefire16254114240217355026tmp surefire_011149796450419615267tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/gui/lei/3.ano/es/teste/jgrapht-core/target/test-classes:/home/gui/.m2/repository/com/googlecode/junit-toolbox/junit-toolbox/2.4/junit-toolbox-2.4.jar:/home/gui/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar:/home/gui/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/gui/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/home/gui/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/gui/.m2/repository/org/mockito/mockito-core/1.9.5/mockito-core-1.9.5.jar:/home/gui/.m2/repository/org/objenesis/objenesis/1.0/objenesis-1.0.jar:/home/gui/.m2/repository/org/openjdk/jmh/jmh-core/1.28/jmh-core-1.28.jar:/home/gui/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/home/gui/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/home/gui/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.28/jmh-generator-annprocess-1.28.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/gui"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="jdk.module.path" value="/home/gui/lei/3.ano/es/teste/jgrapht-core/target/classes:/home/gui/.m2/repository/org/jheaps/jheaps/0.14/jheaps-0.14.jar:/home/gui/.m2/repository/org/apfloat/apfloat/1.10.1/apfloat-1.10.1.jar"/>
    <property name="java.version.date" value="2022-03-22"/>
    <property name="java.home" value="/home/gui/.jdks/openjdk-18"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/gui/lei/3.ano/es/teste/jgrapht-core"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="18+36-2087"/>
    <property name="user.name" value="gui"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="5.13.0-37-generic"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/home/gui/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="idea.version" value="2021.3.3"/>
    <property name="java.version" value="18"/>
    <property name="user.dir" value="/home/gui/lei/3.ano/es/teste/jgrapht-core"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.language.format" value="pt"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="18+36-2087"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="62.0"/>
  </properties>
  <testcase name="testElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.007"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testRemoveLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testIsEmpty[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 0]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.003"/>
  <testcase name="testOffer[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 1]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testAddInt_atIndexSize[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.003"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 2]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 3]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 4]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.002"/>
  <testcase name="testPrepend[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 5]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.004"/>
  <testcase name="testLastNodeOf[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 6]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 7]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeInOtherList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInOtherList_minusOne[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheEnd_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setTwice_listWithReplacedElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInOtherListBeforeNodeOfList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInList_indexOfNode[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInList_ElementAdded[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_freeNode_nodeAddedToList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_inTheMiddle[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeNotInList_listUnchanged[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_freeNode_nodeAddedToList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterAdd_IllegalstateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementNotInList_null[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPop[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentAdd_ConcurrentModificationException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndexSize[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testClear[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeInOtherList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOffer[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeek[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPoll[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPush[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testSize[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIndexOfNode_nodeInNoList_minusOne[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexSize_IndexOutOfBoundsException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInOtherList_false[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNode_nodeOfThisList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorE[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromFront_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPrepend[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorInt_indexInTheMiddle_iteratorAtCorrectIndex[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testOfferFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testCircularIterator[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testDescendingIterator[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBehindTail[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeFreeNode_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nullValue_valueAdded[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInList_nodeAddedToList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndex0[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_inTheMiddle[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNext_iterateForwardTroughCompleteList_ListNodesInOrder[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testReverseCircularIterator[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0.001"/>
  <testcase name="testListIteratorSet_replaceElementAtFront_listWithReplacedElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorPrevious_iterateBackwardTroughCompleteList_ListNodesInOrder[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheFront_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetLastNode[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInAtEnd_listWithReplacedElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_notMovedListIterator_IllegalStateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveInt_atIndexSizeMinusOne[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setElementWithSubsequentRemove_listWithReplacedElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_nodeInThisListBeforeNodeOfList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInNoList_false[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_nodeInList_nodeRemoved[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeBefore_freeNodeBeforeNodeInOtherList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_setAfterRemove_IllegalstateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollFirst[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_NotMovedListIterator_IllegalstateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddInt_atIndex0[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testMoveFrom[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromMiddle_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementBeforeEnd_listWithAdditionalElements[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetNode_indexNegative_IndexOutOfBoundsException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPeekLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeTwiceAfterNext_IllegalStateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveFirstOccurrence[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testNodeOf_elementInList_nodeOfElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_concurrentRemove_ConcurrentModificationException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveLastOccurrence[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_removeAfterAdd_IllegalStateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testLastNodeOf[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsInTheMiddle_listWithAdditionalElements[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetFirstNode[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAppend[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testPollLast[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testGetInt[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeInOtherList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testInvert[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInNoList_IllegalStateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIterator_iterateBeforeHead[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorSet_replaceElementInTheMiddle_listWithReplacedElement[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorRemove_clearListFromTheMiddle_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testContainsNode_nodeInList_true[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_nodeOfThisList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIsEmpty[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeFirst_freeNode_nodeAddedToList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemove[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementBeforeNode_sucessorInOtherList_IllegalStateException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddNodeLast_nodeOfThisList_IllegalArgumentException[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtFront_listWithAdditionalElements[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testIterator[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorNextPrevious_forwardBackwardPattern_correctElements[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testRemoveNode_removeAllNodesInListFromEnd_emptyList[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testListIteratorAdd_addElementsAtEnd_listWithAdditionalElements[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
  <testcase name="testAddElementFirst_nonNullValue_valueAdded[List with size 8]" classname="org.jgrapht.util.DoublyLinkedListTest" time="0"/>
</testsuite>